const axios = require('axios');

// Fun√ß√£o para buscar dados do grupo C.Agri e mostrar problemas espec√≠ficos
async function debugMapeamento() {
    try {
        console.log('üîç DIAGN√ìSTICO DE MAPEAMENTO - GRUPO C.AGRI');
        console.log('='.repeat(60));
        
        // Simular busca de dados (vamos usar os dados que j√° conhecemos)
        const empresasRaw = [
            {
                nome_fantasia: "COOPERATIVA CENTRAL AGROCOMMERCIAL",
                razao_social: "COOPERATIVA CENTRAL AGROCOMMERCIAL",
                cnpj: "02.617.552/0001-30",
                codigo: 1001,
                grupo: "Grupo C.Agri",
                inicio_contrato: "2025-01-09", // Formato americano problem√°tico
                
                // PROBLEMAS DE CONTATOS (campos desalinhados)
                contato_principal_nome: "", // VAZIO - problema!
                contato_principal_cargo: "Jo√£o Silva", // NOME est√° aqui
                contato_principal_email: "Gerente Comercial", // CARGO est√° aqui  
                contato_principal_celular: "joao@cagri.com.br", // EMAIL est√° aqui
                
                // PROBLEMAS DE PLANO/SLA
                plano_contratado: "(11) 98765-4321", // CELULAR est√° aqui
                sla: "Plano Premium", // PLANO est√° aqui
                
                // PROBLEMAS DE SERVI√áOS - N√ÉO DETECTA "10 horas √∫teis"
                bpo_contabil: "10 horas √∫teis", // ‚ùå N√ÉO √â "Sim"
                bpo_fiscal: "Sim",
                bpo_folha: "N√£o", 
                bpo_financeiro: "Sim",
                
                vl_bpo_contabil: "R$ 2.500,00",
                vl_bpo_fiscal: "R$ 1.800,00",
                
                observacao_closer: "", // VAZIO
                motivo_troca: "Cliente migrou de outro escrit√≥rio por insatisfa√ß√£o com atendimento" // CONTE√öDO est√° aqui
            }
        ];
        
        console.log('üìã DADOS ORIGINAIS (PROBLEMAS):');
        console.log('--------------------------------');
        const empresa = empresasRaw[0];
        
        console.log('üî¥ PROBLEMA 1 - CONTATOS DESALINHADOS:');
        console.log(`   Nome: "${empresa.contato_principal_nome}" (VAZIO)`);
        console.log(`   Cargo: "${empresa.contato_principal_cargo}" (NA VERDADE √â O NOME)`);
        console.log(`   Email: "${empresa.contato_principal_email}" (NA VERDADE √â O CARGO)`);
        console.log(`   Celular: "${empresa.contato_principal_celular}" (NA VERDADE √â O EMAIL)`);
        console.log('');
        
        console.log('üî¥ PROBLEMA 2 - PLANO/SLA TROCADOS:');
        console.log(`   Plano: "${empresa.plano_contratado}" (NA VERDADE √â O CELULAR)`);
        console.log(`   SLA: "${empresa.sla}" (NA VERDADE √â O PLANO)`);
        console.log('');
        
        console.log('üî¥ PROBLEMA 3 - SERVI√áOS N√ÉO DETECTADOS:');
        console.log(`   BPO Cont√°bil: "${empresa.bpo_contabil}" (‚â† "Sim", logo N√ÉO SER√Å DETECTADO)`);
        console.log(`   BPO Fiscal: "${empresa.bpo_fiscal}" (= "Sim", SER√Å DETECTADO)`);
        console.log('');
        
        console.log('üî¥ PROBLEMA 4 - OBSERVA√á√ÉO MAPEAMENTO INCORRETO:');
        console.log(`   Observa√ß√£o Closer: "${empresa.observacao_closer}" (VAZIO)`);
        console.log(`   Motivo Troca: "${empresa.motivo_troca}" (TEM CONTE√öDO)`);
        console.log('');
        
        console.log('üî¥ PROBLEMA 5 - DATA FORMATO AMERICANO:');
        console.log(`   Data API: "${empresa.inicio_contrato}" (2025-01-09 = 09/01/2025, mas pode ser interpretado como 01/09/2025)`);
        
        console.log('');
        console.log('üõ†Ô∏è  TESTANDO CORRE√á√ïES ATUAIS...');
        console.log('='.repeat(60));
        
        // Testar fun√ß√£o de corre√ß√£o atual
        const XlsxGeneratorService = require('./backend/src/services/xlsx-generator.service');
        const empresaCorrigida = XlsxGeneratorService.fixDataMisalignment(empresa);
        
        console.log('‚úÖ AP√ìS CORRE√á√ÉO:');
        console.log('------------------');
        console.log('üìû CONTATOS CORRIGIDOS:');
        console.log(`   Nome: "${empresaCorrigida.contato_principal_nome}"`);
        console.log(`   Cargo: "${empresaCorrigida.contato_principal_cargo}"`);
        console.log(`   Email: "${empresaCorrigida.contato_principal_email}"`);
        console.log(`   Celular: "${empresaCorrigida.contato_principal_celular}"`);
        console.log('');
        
        console.log('üìã PLANO/SLA CORRIGIDOS:');
        console.log(`   Plano: "${empresaCorrigida.plano_contratado}"`);
        console.log(`   SLA: "${empresaCorrigida.sla}"`);
        console.log('');
        
        console.log('üìù OBSERVA√á√ÉO CORRIGIDA:');
        console.log(`   Observa√ß√£o Closer: "${empresaCorrigida.observacao_closer}"`);
        console.log('');
        
        // Testar detec√ß√£o de servi√ßos
        console.log('üîç TESTANDO DETEC√á√ÉO DE SERVI√áOS:');
        console.log('----------------------------------');
        
        const servicosDisponiveis = [
            { campo: 'bpo_contabil', nome: 'BPO Cont√°bil' },
            { campo: 'bpo_fiscal', nome: 'BPO Fiscal' },
            { campo: 'bpo_folha', nome: 'BPO Folha' },
            { campo: 'bpo_financeiro', nome: 'BPO Financeiro' },
        ];
        
        console.log('‚ùå L√ìGICA ATUAL (DETECTA APENAS "Sim"):');
        servicosDisponiveis.forEach(servico => {
            const valor = empresaCorrigida[servico.campo];
            const detectado = valor === 'Sim' ? '‚úÖ DETECTADO' : '‚ùå N√ÉO DETECTADO';
            console.log(`   ${servico.nome}: "${valor}" ‚Üí ${detectado}`);
        });
        
        console.log('');
        console.log('‚úÖ L√ìGICA MELHORADA (DEVERIA DETECTAR):');
        servicosDisponiveis.forEach(servico => {
            const valor = empresaCorrigida[servico.campo];
            // L√≥gica melhorada: detecta "Sim" ou valores que n√£o sejam "N√£o", vazios ou nulos
            const detectado = valor && valor.trim() && valor.toLowerCase() !== 'n√£o' ? '‚úÖ DEVERIA SER DETECTADO' : '‚ùå N√ÉO DETECTADO';
            console.log(`   ${servico.nome}: "${valor}" ‚Üí ${detectado}`);
        });
        
    } catch (error) {
        console.error('‚ùå Erro no diagn√≥stico:', error.message);
    }
}

debugMapeamento();