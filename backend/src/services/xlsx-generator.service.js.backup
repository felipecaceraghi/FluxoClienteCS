const ExcelJS = require('exceljs');
const fs = require('fs');
const path = require('path');
const logger = require('../utils/logger');
const axios = require('axios');

class XlsxGeneratorService {
    constructor() {
        this.outputDir = path.join(__dirname, '../storage/generated-reports');
        this.ensureOutputDir();
        this.workbook = null;
        this.worksheet = null;
        this.currentRow = 1;
        this.dataRows = []; // Array para armazenar todas as linhas antes da escrita
        
        this.boldLabels = [
            'Apelido:', 'C√≥digo no sistema Dom√≠nio:', 'Raz√£o Social:', 'CNPJ:', 
            'Vig√™ncia Inicial:', 'Site:', 'Plano Contratado:', 'SLA Para Retorno:',
            'Servi√ßos Contratados', 'Servi√ßo 1:', 'Servi√ßo 2:', 'Servi√ßo 3:', 'Servi√ßo 4:', 'Servi√ßo 5:', 'Servi√ßo 6:',
            'Contato Principal', 'Nome:', 'Cargo:', 'E-mail:', 'Celular:',
            'Entendimento do Neg√≥cio', 'Faturamento anual:', 'Regime Tribut√°rio:',
            'NF de Entrada:', 'NF de Sa√≠da:', 'CT-es de Entrada:', 'CT-es de Sa√≠da:',
            'NF de Prestados:', 'NF de Tomados:', 'Funcion√°rios PJ:', 'Centros de Custo:',
            'Folha de Pagamento', 'Funcion√°rios CLT:', 'Pr√≥-Labore:', 'Estagi√°rios:',
            'Aprendizes:', 'Aut√¥nomos - RPA:', 'Dom√©sticas CLT:', 'Sistemas',
            'Cont√°bil e Fiscal:', 'Contabilidade e Fiscal', 'Deadline:', 'CNAE:',
            'Comercial', 'Closer:', 'Prospector:', 'Obs:'
        ];

        // Definir estilos
        this.styles = {
            default: {
                font: { name: 'Calibri', size: 11 },
                alignment: { vertical: 'top', horizontal: 'left' }
            },
            bold: {
                font: { name: 'Calibri', size: 11, bold: true },
                alignment: { vertical: 'top', horizontal: 'left' }
            },
            sectionHeader: {
                font: { name: 'Calibri', size: 12, bold: true },
                alignment: { vertical: 'top', horizontal: 'left' },
                fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFADDBDC' } }
            },
            mainHeader: {
                font: { name: 'Calibri', size: 25, bold: true, color: { argb: 'FF000000' } },
                alignment: { vertical: 'middle', horizontal: 'left' }
            },
            companyName: {
                font: { name: 'Calibri', size: 11, bold: true },
                alignment: { vertical: 'top', horizontal: 'left' }
            }
        };

        // Lista de nomes de empresas para aplicar negrito
        this.companyNames = [];
        
        // Configura√ß√£o de truncamento
        this.maxCompanyNameLength = 52;
    }

    ensureOutputDir() {
        if (!fs.existsSync(this.outputDir)) {
            fs.mkdirSync(this.outputDir, { recursive: true });
            logger.info('üìÅ Diret√≥rio de relat√≥rios criado', { path: this.outputDir });
        }
    }

    // Fun√ß√£o para converter valores para n√∫meros nativos
    convertToNumber(value, defaultValue = 0) {
        if (value === null || value === undefined || value === '') {
            return defaultValue;
        }
        
        if (typeof value === 'number') {
            return value;
        }
        
        if (typeof value === 'string') {
            const trimmed = value.trim();
            if (trimmed === '') {
                return defaultValue;
            }
            
            const parsed = parseFloat(trimmed);
            if (!isNaN(parsed) && isFinite(parsed)) {
                return parsed;
            }
        }
        
        return value;
    }

    truncateCompanyName(name) {
        if (!name) return '';
        const nameStr = String(name).trim();
        if (nameStr.length <= this.maxCompanyNameLength) {
            return nameStr;
        }
        const truncated = nameStr.substring(0, this.maxCompanyNameLength - 3) + '...';
        logger.info('‚úÇÔ∏è Nome truncado', { original: nameStr, truncated });
        return truncated;
    }

    getFixedColumnWidths() {
        return [
            1.22,  // Coluna A (vazia)
            1.89,  // Coluna B (vazia)
            30,    // Coluna C (labels)
            50.11, // Coluna D
            54.78, // Coluna E  
            35,    // Coluna F
            14.89, // Coluna G
            1.22,  // Coluna H (vazia)
            1.89   // Coluna I (vazia)
        ];
    }

    setupColumns(worksheet, fixedWidths) {
        const columns = fixedWidths.map(width => ({ width }));
        worksheet.columns = columns;
        
        // Oculta todas as colunas ap√≥s I
        for (let colIndex = 9; colIndex <= 50; colIndex++) {
            const column = worksheet.getColumn(colIndex + 1);
            column.hidden = true;
        }
        
        worksheet.views = [{ showGridLines: false }];
    }

    chunkArray(array, size) {
        const chunks = [];
        for (let i = 0; i < array.length; i += size) {
            chunks.push(array.slice(i, i + size));
        }
        return chunks;
    }

    addGroupHeader(dataRows, groupName) {
        // Linha 1: Vazia (espa√ßamento)
        dataRows.push({ data: ['', '', '', '', '', '', '', '', ''], styleType: 'default' });
        
        // Linha 2: Vazia (espa√ßamento) 
        dataRows.push({ data: ['', '', '', '', '', '', '', '', ''], styleType: 'default' });
        
        // Linha 3: Reservada para imagem
        dataRows.push({ data: ['', '', '', '', '', '', '', '', ''], styleType: 'default' });
        
        // Linha 4: Novo cliente
        dataRows.push({ data: ['', '', `Novo cliente - ${groupName}`, '', '', '', '', '', ''], styleType: 'mainHeader' });
        dataRows.push({ data: ['', '', '', '', '', '', '', '', ''], styleType: 'default' });
    }

    addCompanyBasicInfo(dataRows, companies) {
        const chunks = this.chunkArray(companies, 3);
        
        chunks.forEach(chunk => {
            const apelidoRow = ['', '', 'Apelido:'];
            chunk.forEach(company => {
                apelidoRow.push(this.truncateCompanyName(company.nome_fantasia));
            });
            while (apelidoRow.length < 9) apelidoRow.push('');
            dataRows.push({ data: apelidoRow, styleType: 'default' });

            const codigoRow = ['', '', 'C√≥digo no sistema Dom√≠nio:'];
            chunk.forEach(company => {
                codigoRow.push(this.convertToNumber(company.codigo, ''));
            });
            while (codigoRow.length < 9) codigoRow.push('');
            dataRows.push({ data: codigoRow, styleType: 'default' });

            const razaoRow = ['', '', 'Raz√£o Social:'];
            chunk.forEach(company => {
                razaoRow.push(company.razao_social || '');
            });
            while (razaoRow.length < 9) razaoRow.push('');
            dataRows.push({ data: razaoRow, styleType: 'default' });

            const cnpjRow = ['', '', 'CNPJ:'];
            chunk.forEach(company => {
                cnpjRow.push(company.cnpj || '');
            });
            while (cnpjRow.length < 9) cnpjRow.push('');
            dataRows.push({ data: cnpjRow, styleType: 'default' });

            const vigenciaRow = ['', '', 'Vig√™ncia Inicial:'];
            chunk.forEach(company => {
                const dataInicio = company.inicio_contrato ? new Date(company.inicio_contrato) : new Date();
                const mes = String(dataInicio.getMonth() + 1).padStart(2, '0');
                const ano = dataInicio.getFullYear();
                vigenciaRow.push(`${mes}/${ano}`);
            });
            while (vigenciaRow.length < 9) vigenciaRow.push('');
            dataRows.push({ data: vigenciaRow, styleType: 'default' });

            const siteRow = ['', '', 'Site:'];
            chunk.forEach(company => {
                siteRow.push('https://teklamatik.com.br/');
            });
            while (siteRow.length < 9) siteRow.push('');
            dataRows.push({ data: siteRow, styleType: 'default' });

            const planoRow = ['', '', 'Plano Contratado:'];
            chunk.forEach(company => {
                planoRow.push(company.plano_contratado || 'Advanced');
            });
            while (planoRow.length < 9) planoRow.push('');
            dataRows.push({ data: planoRow, styleType: 'default' });

            const slaRow = ['', '', 'SLA Para Retorno:'];
            chunk.forEach(company => {
                slaRow.push(company.sla || '48 horas √∫teis');
            });
            while (slaRow.length < 9) slaRow.push('');
            dataRows.push({ data: slaRow, styleType: 'default' });

            dataRows.push({ data: ['', '', '', '', '', '', '', '', ''], styleType: 'default' });
        });
    }

    addContractedServices(dataRows, companies) {
        dataRows.push({ data: ['', '', 'Servi√ßos Contratados', '', '', '', '', '', ''], styleType: 'sectionHeader' });

        const servicosDisponiveis = [
            { campo: 'bpo_contabil', nome: 'BPO Cont√°bil' },
            { campo: 'bpo_fiscal', nome: 'BPO Fiscal' },
            { campo: 'bpo_folha', nome: 'BPO Folha' },
            { campo: 'bpo_financeiro', nome: 'BPO Financeiro' },
            { campo: 'bpo_rh', nome: 'BPO RH' },
            { campo: 'bpo_cnd', nome: 'Certid√µes Negativas' }
        ];

        const servicosContratados = [];
        let numeroServico = 1;

        servicosDisponiveis.forEach(servico => {
            if (companies.some(c => c[servico.campo] === 'Sim')) {
                servicosContratados.push(['', '', `Servi√ßo ${numeroServico}:`, servico.nome, '', '', '', '', '']);
                numeroServico++;
            }
        });

        servicosContratados.forEach(servico => {
            dataRows.push({ data: servico, styleType: 'default' });
        });

        if (servicosContratados.length === 0) {
            dataRows.push({ data: ['', '', 'Nenhum servi√ßo contratado', '', '', '', '', '', ''], styleType: 'default' });
        }

        dataRows.push({ data: ['', '', '', '', '', '', '', '', ''], styleType: 'default' });
    }

    addMainContact(dataRows, companies) {
        const firstCompany = companies[0];
        
        dataRows.push({ data: ['', '', 'Contato Principal', '', '', '', '', '', ''], styleType: 'sectionHeader' });
        dataRows.push({ data: ['', '', 'Nome:', firstCompany.contato_principal_nome || '', '', '', '', '', ''], styleType: 'default' });
        dataRows.push({ data: ['', '', 'Cargo:', firstCompany.contato_principal_cargo || '', '', '', '', '', ''], styleType: 'default' });
        dataRows.push({ data: ['', '', 'E-mail:', firstCompany.contato_principal_email || '', '', '', '', '', ''], styleType: 'default' });
        dataRows.push({ data: ['', '', 'Celular:', firstCompany.contato_principal_celular || '', '', '', '', '', ''], styleType: 'default' });
        dataRows.push({ data: ['', '', '', '', '', '', '', '', ''], styleType: 'default' });
    }

    addBusinessUnderstanding(dataRows, companies) {
        const chunks = this.chunkArray(companies, 3);
        
        chunks.forEach(chunk => {
            const headerRow = ['', '', 'Entendimento do Neg√≥cio'];
            chunk.forEach(company => {
                headerRow.push(this.truncateCompanyName(company.nome_fantasia));
            });
            while (headerRow.length < 9) headerRow.push('');
            dataRows.push({ data: headerRow, styleType: 'sectionHeader' });

            // Faturamento anual
            const faturamentoRow = ['', '', 'Faturamento anual:'];
            chunk.forEach(company => {
                const faturamentoString = company.faturamento_anual;
                
                if (typeof faturamentoString === 'string' && faturamentoString.trim() !== '') {
                    let valor = faturamentoString.replace(/R\$|\s/g, '');
                    let valorNumerico;
                    
                    if (valor.includes(',') && valor.lastIndexOf(',') > valor.lastIndexOf('.')) {
                        valorNumerico = parseFloat(valor.replace(/\./g, '').replace(',', '.'));
                    } else if (valor.includes('.') && valor.lastIndexOf('.') > valor.lastIndexOf(',')) {
                        valorNumerico = parseFloat(valor.replace(/,/g, ''));
                    } else if (valor.includes('.') && !valor.includes(',')) {
                        valorNumerico = parseFloat(valor);
                    } else if (valor.includes(',') && !valor.includes('.')) {
                        valorNumerico = parseFloat(valor.replace(',', '.'));
                    } else {
                        valorNumerico = parseFloat(valor);
                    }

                    if (!isNaN(valorNumerico) && valorNumerico > 0) {
                        faturamentoRow.push(valorNumerico);
                    } else {
                        faturamentoRow.push('Sem Faturamento');
                    }
                } else {
                    faturamentoRow.push('Sem Faturamento');
                }
            });
            while (faturamentoRow.length < 9) faturamentoRow.push('');
            dataRows.push({ data: faturamentoRow, styleType: 'default', isFaturamento: true });

            const fields = [
                { label: 'Regime Tribut√°rio:', field: 'regime_tributario_atual', default: 'Lucro Presumido' },
                { label: 'NF de Entrada:', field: 'nf_entradas', default: 0, isNumeric: true },
                { label: 'NF de Sa√≠da:', field: 'nf_saidas', default: 0, isNumeric: true },
                { label: 'CT-es de Entrada:', field: 'ctes_entrada', default: 0, isNumeric: true },
                { label: 'CT-es de Sa√≠da:', field: 'ctes_saida', default: 0, isNumeric: true },
                { label: 'NF de Prestados:', field: 'nf_servicos_prestados', default: 0, isNumeric: true },
                { label: 'NF de Tomados:', field: 'servicos_tomados', default: 0, isNumeric: true },
                { label: 'Funcion√°rios PJ:', field: 'nf_pjs', default: 0, isNumeric: true },
                { label: 'Centros de Custo:', field: 'centro_custo_quantidade', default: 0, isNumeric: true }
            ];

            fields.forEach(({ label, field, default: defaultValue, isNumeric }) => {
                const row = ['', '', label];
                chunk.forEach(company => {
                    if (isNumeric) {
                        row.push(this.convertToNumber(company[field], defaultValue));
                    } else {
                        row.push(company[field] || defaultValue);
                    }
                });
                while (row.length < 9) row.push('');
                dataRows.push({ data: row, styleType: 'default' });
            });

            dataRows.push({ data: ['', '', '', '', '', '', '', '', ''], styleType: 'default' });
        });
    }

    async generateXlsx(groupName, companies) {
        try {
            logger.info('üìä Iniciando gera√ß√£o de XLSX', { grupo: groupName, empresas: companies.length });

            const workbook = new ExcelJS.Workbook();
            const worksheet = workbook.addWorksheet('Board');
            
            const fixedWidths = this.getFixedColumnWidths();
            this.setupColumns(worksheet, fixedWidths);

            const dataRows = [];
            const companyNames = companies.map(company => 
                this.truncateCompanyName(company.nome_fantasia)
            ).filter(name => name.trim() !== '');

            // Adicionar todas as se√ß√µes
            this.addGroupHeader(dataRows, groupName);
            this.addCompanyBasicInfo(dataRows, companies);
            this.addContractedServices(dataRows, companies);
            this.addMainContact(dataRows, companies);
            this.addBusinessUnderstanding(dataRows, companies);

            // Escrever dados na planilha
            dataRows.forEach((rowData, index) => {
                const row = worksheet.addRow(rowData.data);
                
                // Aplicar estilos
                row.eachCell((cell, colNumber) => {
                    cell.font = this.styles[rowData.styleType].font;
                    cell.alignment = this.styles[rowData.styleType].alignment;
                    if (this.styles[rowData.styleType].fill) {
                        cell.fill = this.styles[rowData.styleType].fill;
                    }
                });

                // Formata√ß√£o especial para faturamento
                if (rowData.isFaturamento) {
                    for (let colIndex = 3; colIndex <= 5; colIndex++) {
                        const cell = row.getCell(colIndex + 1);
                        if (typeof cell.value === 'number') {
                            cell.numFmt = '"R$" #,##0.00';
                        }
                    }
                }

                // Formata√ß√£o de labels em negrito
                if (rowData.data[2]) {
                    const cellValue = String(rowData.data[2]).trim();
                    const isLabel = this.boldLabels.includes(cellValue) ||
                                   cellValue.startsWith('Novo cliente -');
                    
                    if (isLabel) {
                        const cellC = row.getCell(3);
                        if (cellValue.startsWith('Novo cliente -')) {
                            cellC.font = this.styles.mainHeader.font;
                            cellC.alignment = this.styles.mainHeader.alignment;
                            // Mesclar c√©lulas para o cabe√ßalho principal
                            worksheet.mergeCells(`C${index + 1}:I${index + 1}`);
                        } else {
                            cellC.font = this.styles.bold.font;
                        }
                    }
                }

                // Formata√ß√£o de nomes de empresas
                for (let colIndex = 3; colIndex <= 5; colIndex++) {
                    if (rowData.data[colIndex]) {
                        const cellValue = String(rowData.data[colIndex]).trim();
                        const isCompanyName = companyNames.includes(cellValue);
                        
                        if (isCompanyName) {
                            const cell = row.getCell(colIndex + 1);
                            cell.font = this.styles.companyName.font;
                        }
                    }
                }

                // Sites como hyperlinks
                if (rowData.data[2] && String(rowData.data[2]).trim() === 'Site:') {
                    for (let colIndex = 3; colIndex <= 5; colIndex++) {
                        if (rowData.data[colIndex] && String(rowData.data[colIndex]).trim().startsWith('http')) {
                            const cell = row.getCell(colIndex + 1);
                            const url = String(rowData.data[colIndex]).trim();
                            cell.value = {
                                text: url,
                                hyperlink: url
                            };
                            cell.font = {
                                ...this.styles.default.font,
                                color: { argb: 'FF000000' },
                                underline: true
                            };
                        }
                    }
                }
            });

            // Gerar nome do arquivo √∫nico
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const sanitizedGroupName = groupName.replace(/[^\w\s-]/g, '').replace(/\s+/g, '_');
            const fileName = `${sanitizedGroupName}_Ficha_Entrada_${timestamp}.xlsx`;
            const filePath = path.join(this.outputDir, fileName);

            // Salvar arquivo
            await workbook.xlsx.writeFile(filePath);

            logger.info('‚úÖ Planilha XLSX gerada com sucesso', {
                arquivo: fileName,
                empresas: companies.length,
                linhas: dataRows.length
            });

            return {
                success: true,
                fileName,
                filePath,
                relativePath: `/api/group-search/download/${fileName}`,
                stats: {
                    empresas: companies.length,
                    linhas: dataRows.length,
                    tamanhoArquivo: fs.statSync(filePath).size
                }
            };

        } catch (error) {
            logger.error('‚ùå Erro ao gerar planilha XLSX', error);
            throw error;
        }
    }

    // M√©todo para limpar arquivos antigos (manter apenas os √∫ltimos 10)
    cleanupOldFiles() {
        try {
            const files = fs.readdirSync(this.outputDir)
                .filter(file => file.endsWith('.xlsx'))
                .map(file => ({
                    name: file,
                    path: path.join(this.outputDir, file),
                    stats: fs.statSync(path.join(this.outputDir, file))
                }))
                .sort((a, b) => b.stats.mtime - a.stats.mtime);

            // Manter apenas os 10 mais recentes
            const filesToDelete = files.slice(10);
            
            filesToDelete.forEach(file => {
                fs.unlinkSync(file.path);
                logger.info('üóëÔ∏è Arquivo antigo removido', { arquivo: file.name });
            });

        } catch (error) {
            logger.error('‚ùå Erro ao limpar arquivos antigos', error);
        }
    }

    // M√©todo para verificar se arquivo existe
    fileExists(fileName) {
        const filePath = path.join(this.outputDir, fileName);
        return fs.existsSync(filePath);
    }

    // M√©todo para obter caminho do arquivo
    getFilePath(fileName) {
        return path.join(this.outputDir, fileName);
    }
}

module.exports = new XlsxGeneratorService();
